var assert = require('assert')
var bitcoinjs = require('bitcoinjs-lib')
var jsend = require('jsend')

function handleJSend(handle, callback) {
  return function(err, res) {
    if (err) return callback(err)

    var result
    try {
      assert(jsend.isValid(res.body), 'Invalid JSend Response ' + JSON.stringify(res.body))

      result = handle(res.body.data)
    } catch (exception) {
      return callback(exception)
    }

    callback(undefined, result)
  }
}

function paginate(url, joiner, batchSize, limit, values) {
  var queries = []

  for (var i = 0; i < values.length; i += batchSize) {
    var slice = values.slice(i, i + batchSize)
    var query = url + slice.join(joiner)

    if (limit) {
      query += '&limit=' + limit
    }

    queries.push(query)
  }

  return queries
}

function parseHBTransaction(transaction) {
  var tx = new bitcoinjs.Transaction()
  tx.locktime = transaction.locktime
  tx.version = transaction.version

  transaction.inputs.forEach(function(txIn) {
    var index = txIn.prevTxoutIndex
    var script = bitcoinjs.Script.fromHex(txIn.scriptSig)
    var sequence = txIn.sequence
    var txId = txIn.prevTxHash

    tx.addInput(txId, index, sequence, script)
  })

  transaction.outputs.forEach(function(txOut) {
    var script = bitcoinjs.Script.fromHex(txOut.scriptPubKey)
    tx.addOutput(script, txOut.value)
  })

  return tx.toHex()
}

module.exports = {
  handleJSend: handleJSend,
  paginate: paginate,
  parseHBTransaction: parseHBTransaction
}
