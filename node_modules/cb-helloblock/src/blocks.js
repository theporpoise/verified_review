var assert = require('assert')
var async = require('async')
var request = require('superagent')
var utils = require('./utils')

function Blocks(url) {
  this.url = url
}

Blocks.prototype.get = function() {
  assert(false, 'TODO')
}

Blocks.prototype.latest = function(callback) {
  var query = '/latest?limit=1'

  request
  .get(this.url + query)
  .end(utils.handleJSend(function(data) {
    var block = data.blocks[0]

    return {
      blockId: block.blockHash,
      prevBlockId: block.prevBlockHash,
      merkleRootHash: block.merkleRootHash,
      nonce: block.nonce,
      version: block.version,
      blockHeight: block.blockHeight,
      blockSize: block.bits,
      timestamp: block.blockTime,
      txCount: block.txsCount
    }
  }, callback))
}

Blocks.prototype.propagate = function() {
  assert(false, 'TODO')
}

Blocks.prototype.summary = function(blockIds, done) {
  var url = this.url
  var tasks = [].concat(blockIds).map(function(blockId) {
    return function(callback) {
      request
      .get(url + '/' + blockId)
      .end(utils.handleJSend(function(data) {
        data = data.block

        return {
          blockId: data.blockHash,
          prevBlockId: data.prevBlockHash,
          merkleRootHash: data.merkleRootHash,
          nonce: data.nonce,
          version: data.version,
          blockHeight: data.blockHeight,
          blockSize: data.bits,
          timestamp: data.blockTime,
          txCount: data.txsCount
        }
      }, callback))
    }
  })

  async.parallel(tasks, function(err, results) {
    if (err) return done(err)

    done(undefined, Array.isArray(blockIds) ? results : results[0])
  })
}

module.exports = Blocks
