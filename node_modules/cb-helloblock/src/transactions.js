var async = require('async')
var request = require('superagent')
var utils = require('./utils')

function Transactions(url) {
  this.url = url
}

Transactions.prototype.get = function(txIds, done) {
  var base = this.url + '?txHashes='
  var queries = utils.paginate(base, '&txHashes=', 50, null, [].concat(txIds))

  var tasks = queries.map(function(query) {
    return function(callback) {
      request
      .get(query)
      .end(utils.handleJSend(function(data) {
        return data.transactions.map(function(tx) {
          return {
            txId: tx.txHash,
            txHex: utils.parseHBTransaction(tx),
            blockId: tx.blockHash,
            blockHeight: tx.blockHeight
          }
        })
      }, callback))
    }
  })

  async.parallel(tasks, function(err, results) {
    if (err) return done(err)

    // flatten results
    results = [].concat.apply([], results)

    done(undefined, Array.isArray(txIds) ? results : results[0])
  })
}

Transactions.prototype.propagate = function(txHexs, done) {
  var url = this.url
  var tasks = [].concat(txHexs).map(function(txHex) {
    return function(callback) {
      request
      .post(url)
      .send({ rawTxHex: txHex })
      .end(utils.handleJSend(function() {
        return undefined
      }, callback))
    }
  })

  async.parallel(tasks, function(err) { return done(err) })
}

Transactions.prototype.summary = function(txIds, done) {
  var base = this.url + '?txHashes='
  var queries = utils.paginate(base, '&txHashes=', 50, null, [].concat(txIds))

  var tasks = queries.map(function(query) {
    return function(callback) {
      request
      .get(query)
      .end(utils.handleJSend(function(data) {
        return data.transactions.map(function(tx) {
          return {
            txId: tx.txHash,
            blockId: tx.blockHash,
            blockHeight: tx.blockHeight,
            nInputs: tx.inputsCount,
            nOutputs: tx.outputsCount,
            totalInputValue: tx.totalInputsValue,
            totalOutputValue: tx.totalOutputsValue
          }
        })
      }, callback))
    }
  })

  async.parallel(tasks, function(err, results) {
    if (err) return done(err)

    // flatten results
    results = [].concat.apply([], results)

    done(undefined, Array.isArray(txIds) ? results : results[0])
  })
}

module.exports = Transactions
